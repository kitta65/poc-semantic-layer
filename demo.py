import marimo

__generated_with = "0.14.17"
app = marimo.App(width="medium")


@app.cell
def _():
    import marimo as mo
    import altair as alt
    import polars as pl
    import os
    import datetime
    return alt, datetime, mo, os, pl


@app.cell(hide_code=True)
def _(mo):
    mo.md(r"""# SQL API""")
    return


@app.cell
def _():
    import sqlalchemy
    return (sqlalchemy,)


@app.cell
def _(os, sqlalchemy):
    _password = os.environ.get("POSTGRES_PASSWORD", "password")
    DATABASE_URL = f"postgresql://username:{_password}@localhost:15432/test"
    engine = sqlalchemy.create_engine(DATABASE_URL)
    return (engine,)


@app.cell
def _(engine, mo, orders):
    df_sql_api = mo.sql(
        f"""
        SELECT
          DATE_TRUNC('quarter', orders.created_at) as quarter,
          MEASURE(orders.count_user) as count_user
        FROM
          orders
        GROUP BY
          1
        LIMIT
          10000;
        """,
        engine=engine
    )
    return (df_sql_api,)


@app.cell
def _(alt, df_sql_api):
    # generated by built-in chart builder
    # see https://docs.marimo.io/guides/working_with_data/plotting/#chart-builder
    _chart = (
        alt.Chart(df_sql_api)
        .mark_bar()
        .encode(
            x=alt.X(field='quarter', type='temporal', timeUnit='yearmonthdate'),
            y=alt.Y(field='count_user', type='quantitative', aggregate='mean'),
            tooltip=[
                alt.Tooltip(field='quarter', timeUnit='yearmonthdate', title='quarter'),
                alt.Tooltip(field='count_user', aggregate='mean', format=',.0f')
            ]
        )
        .properties(
            height=290,
            width='container',
            config={
                'axis': {
                    'grid': False
                }
            }
        )
    )
    _chart
    return


@app.cell(hide_code=True)
def _(mo):
    mo.md(r"""# GraphQL API""")
    return


@app.cell
def _():
    from graphql_client import Client, OrderBy
    from graphql_client.custom_fields import (
        OrdersMembersFields,
        OrdersWhereInput,
        UsersMembersFields,
        ResultFields,
        TimeDimensionFields,
    )
    from graphql_client.input_types import OrdersOrderByInput, DateTimeFilter
    from graphql_client.custom_queries import Query
    return (
        Client,
        DateTimeFilter,
        OrderBy,
        OrdersMembersFields,
        OrdersOrderByInput,
        OrdersWhereInput,
        Query,
        ResultFields,
        TimeDimensionFields,
        UsersMembersFields,
    )


@app.cell
def _(Client):
    client = Client(url="http://localhost:4000/cubejs-api/graphql")
    return (client,)


@app.cell
def _(client, datetime, pl):
    async def pl_from_query(query, operation_name="temp_query"):
        data = await client.query(query, operation_name=operation_name)
        data = data["cube"]
        data = map(
            lambda x: flatten_dimensions(flatten_cubes(x)),
            data,
        )
        return pl.from_dicts(data)


    def flatten_cubes(cubes):
        res = {}
        for key, val in cubes.items():
            for k, v in val.items():
                res[f"{key}_{k}"] = v
        return res


    def flatten_dimensions(dims):
        res = {}
        for key, val in dims.items():
            if isinstance(val, dict):  # if time dimension
                for k, v in val.items():
                    res[f"{key}_{k}"] = datetime.datetime.fromisoformat(v)
            else:
                res[key] = val
        return res
    return (pl_from_query,)


@app.cell
async def _(
    DateTimeFilter,
    OrderBy,
    OrdersMembersFields,
    OrdersOrderByInput,
    OrdersWhereInput,
    Query,
    ResultFields,
    TimeDimensionFields,
    UsersMembersFields,
    pl_from_query,
):
    _query = Query.cube().fields(
        ResultFields.orders(
            where=OrdersWhereInput(created_at=DateTimeFilter(inDateRange=["last 12 months"])),
            order_by=OrdersOrderByInput(created_at=OrderBy.asc)
        ).fields(
            OrdersMembersFields.created_at().fields(TimeDimensionFields.month),
            OrdersMembersFields.ratio_count_yoy,
        ),
        ResultFields.users().fields(UsersMembersFields.gender),
    )
    df_gql_api = await pl_from_query(_query)
    df_gql_api
    return (df_gql_api,)


@app.cell
def _(alt, df_gql_api):
    # generated by built-in chart builder
    # see https://docs.marimo.io/guides/working_with_data/plotting/#chart-builder
    _chart = (
        alt.Chart(df_gql_api)
        .mark_point()
        .encode(
            x=alt.X(field='orders_created_at_month', type='temporal', timeUnit='yearmonthdate'),
            y=alt.Y(field='orders_ratio_count_yoy', type='quantitative', aggregate='mean'),
            color=alt.Color(field='users_gender', type='nominal'),
            tooltip=[
                alt.Tooltip(field='orders_created_at_month', timeUnit='yearmonthdate', title='orders_created_at_month'),
                alt.Tooltip(field='orders_ratio_count_yoy', aggregate='mean', format=',.2f'),
                alt.Tooltip(field='users_gender')
            ]
        )
        .properties(
            height=290,
            width='container',
            config={
                'axis': {
                    'grid': True
                }
            }
        )
    )
    _chart
    return


if __name__ == "__main__":
    app.run()
